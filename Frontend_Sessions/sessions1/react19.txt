1.useTransition
    // Using pending state from Actions
        function UpdateName({}) {
            const [name, setName] = useState("");
            const [error, setError] = useState(null);
            const [isPending, startTransition] = useTransition();

            const handleSubmit = () => {
                startTransition(async () => {
                const error = await updateName(name);
                if (error) {
                    setError(error);
                    return;
                } 
                redirect("/path");
                })
            };

            return (
                <div>
                <input value={name} onChange={(event) => setName(event.target.value)} />
                <button onClick={handleSubmit} disabled={isPending}>
                    Update
                </button>
                {error && <p>{error}</p>}
                </div>
            );
        }

2.useActionState
    // Using <form> Actions and useActionState
        function ChangeName({ name, setName }) {
            const [error, submitAction, isPending] = useActionState(
                async (previousState, formData) => {
                    const error = await updateName(formData.get("name"));
                    if (error) {
                        return error;
                    }
                    redirect("/path");
                    return null;
                },
                null,
            );

            return (
                <form action={submitAction}>
                <input type="text" name="name" />
                <button type="submit" disabled={isPending}>Update</button>
                {error && <p>{error}</p>}
                </form>
            );
    }
3.useFormStatus
    // const { pending, data, method, action } = useFormStatus();
    import { useFormStatus } from "react-dom";
    import action from './actions';

    function Submit() {
    const status = useFormStatus();
    return <button disabled={status.pending}>Submit</button>
    }

    export default function App() {
    return (
        <form action={action}>
        <Submit />
        </form>
    );
    }
4.useOptimistic
5.use

React server components (server components, server actions)

Improvements:
1.ref as a prop.
2.diff for hydration errors.
3.<context> as a provider.
4.cleanup functions for ref.
5.initialValue option to useDeferredValue:
6.Support for Document Metadata 
7.Support for stylesheets
8.Support for async scripts
9.Support for preloading resources
10.Compatibility with third-party scripts and extensions 
11.Better error reporting 