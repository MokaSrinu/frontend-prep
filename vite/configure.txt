# Vite project with React, ESLint, and Prettier properly configured without TypeScript.

1. Initialize your Vite project:
    - First, create a new Vite project if you haven't already:
    Code:
        npm init vite@latest my-vite-react-app --template react
        cd my-vite-react-app

2. Install dependencies:
    - Install the necessary dependencies for React and ESLint:
    Code:
        npm install
        npm install -D eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react 
            eslint-plugin-react-hooks

3. Configure ESLint:
    - Create a .eslintrc.js file in the root of your project with the following content:
    Code:
        module.exports = {
            env: {
                browser: true,
                es2021: true,
            },
            extends: [
                'eslint:recommended',
                'plugin:react/recommended',
                'airbnb',
                'airbnb/hooks',
                'prettier',
            ],
            parserOptions: {
                ecmaFeatures: {
                    jsx: true,
                },
                ecmaVersion: 12,
                sourceType: 'module',
            },
            plugins: [
                'react',
            ],
            rules: {
                // Customize your rules here
            },
            settings: {
                react: {
                    version: 'detect',
                },
            },
        };
    - Optionally, you can customize the rules section according to your preferences.

4. Create Prettier Configuration (Optional):
    - If you want to integrate Prettier for code formatting, create a .prettierrc file:
    Code:   
        {
            "singleQuote": true,
            "trailingComma": "all",
            "printWidth": 80,
            "tabWidth": 2,
            "semi": true
        }
    - Then, install the necessary dependencies:
    Code:
        npm install -D prettier eslint-config-prettier eslint-plugin-prettier
    - Update your .eslintrc.js to include Prettier:
    Code:
        module.exports = {
            env: {
                browser: true,
                es2021: true,
            },
            extends: [
                'eslint:recommended',
                'plugin:react/recommended',
                'airbnb',
                'airbnb/hooks',
                'prettier',
                'plugin:prettier/recommended',
            ],
            parserOptions: {
                ecmaFeatures: {
                    jsx: true,
                },
                ecmaVersion: 12,
                sourceType: 'module',
            },
            plugins: [
                'react',
                'prettier',
            ],
            rules: {
                'prettier/prettier': 'error',
                // Customize your rules here
            },
            settings: {
                react: {
                    version: 'detect',
                },
            },
        };

5. Configure Vite:
    - Create or update the vite.config.js file in the root of your project:
    Code:
        import { defineConfig } from 'vite';
        import react from '@vitejs/plugin-react';
        import path from 'path';

        // https://vitejs.dev/config/
        export default defineConfig({
        plugins: [react()],
        resolve: {
            alias: {
                '@': path.resolve(__dirname, './src'),
            },
        },
        });

6. Add ESLint Script:
    - Update your package.json to include an ESLint script:
    Code:
        {
            "scripts": {
                "dev": "vite",
                "build": "vite build",
                "serve": "vite preview",
                "lint": "eslint . --ext .js,.jsx"
            }
        }

9. Run the Project:
    - Start your development server:
    Code:
        npm run dev

10. Lint your code:
    - Run the lint script to check your code:
    Code:
        npm run lint


# Eslint packages usage:
    1. eslint: Core linting tool.
    2. eslint-config-airbnb: Airbnb's style guide for consistent code.
    3. eslint-plugin-import: Lints import/export statements for correctness.
    4. eslint-plugin-jsx-a11y: Ensures accessibility in JSX.
    5. eslint-plugin-react: Enforces React-specific best practices.
    6. eslint-plugin-react-hooks: Ensures correct usage of React Hooks.



# manual configuration of hash names for assets files, js file and css file of build.
        // vite.config.js
        import { defineConfig } from 'vite';

        export default defineConfig({
            build: {
                rollupOptions: {
                    output: {
                        entryFileNames: 'assets/[name].[hash].js',
                        chunkFileNames: 'assets/[name].[hash].js',
                        assetFileNames: 'assets/[name].[hash][extname]'
                    }
                }
            }
        });

        Note:
        1. entryFileNames: 
            - This specifies the naming pattern for the entry files (e.g., the main JavaScript files). [name] is replaced by 
                the name of the entry point, and [hash] is replaced by a unique hash generated based on the content of the file.
        2. chunkFileNames: 
            - This specifies the naming pattern for the code-split chunks generated by Vite. 
            - The placeholders [name] and [hash] work similarly here.
        3. assetFileNames: 
            - This specifies the naming pattern for asset files like images, fonts, etc. 
            - [name] is the original file name, [hash] is a unique hash, and [extname] is the file extension.
