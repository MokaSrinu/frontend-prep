# Part-1:

    1.tsconfig.json:
        - The tsconfig.json file specifies the root files and compiler options required to compile a TypeScript project. 
        - It includes settings like the target ECMAScript version, module system, and other compiler options.
        EX:
            {
                "compilerOptions": {
                    "target": "es6",
                    "module": "commonjs",
                    "strict": true,
                    "outDir": "./dist",
                    "rootDir": "./src"
                },
                "include": ["src/**/*"]
            }

    2.Typed Parameters:
        - TypeScript allows you to specify the types of parameters for functions, ensuring type safety.
        EX:
            function add(a: number, b: number): number {
                return a + b;
            }

    3.Strict Configuration (no any):
        - TypeScript's strict mode is a collection of compiler options that ensure TypeScript's type-checking is more robust. 
        - One of these options is noImplicitAny, which disallows the use of the any type unless explicitly stated.
        EX:
            // tsconfig.json
            {
                "compilerOptions": {
                    "strict": true,
                    "noImplicitAny": true
                }
            }

    4.Eslint:
        - ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. When used with TypeScript, 
            it helps enforce coding standards and catch errors.
        EX:
            // .eslintrc.json
            {
                "parser": "@typescript-eslint/parser",
                "extends": [
                    "eslint:recommended",
                    "plugin:@typescript-eslint/recommended"
                ],
                "rules": {
                    "@typescript-eslint/no-explicit-any": "error"
                }
            }

    5.Primitive Types:
        - TypeScript has the same primitive types as JavaScript: string, number, boolean, bigint, symbol, undefined, and null.
        EX:
            let username: string = "JohnDoe";
            let age: number = 30;
            let isActive: boolean = true;

    6.Union Types:
        - Union types allow you to specify that a variable can be one of several types.
        EX:
            let id: number | string;
            id = 10;
            id = "abc123";

    7.Type Narrowing:
        - Type narrowing is the process of refining a type from a broader type to a more specific type using type guards, 
            assertions, and control flow analysis.
        EX:
            function padLeft(value: string | number, padding: string | number) {
                if (typeof padding === "number") {
                    return Array(padding + 1).join(" ") + value;
                }
                if (typeof padding === "string") {
                    return padding + value;
                }
                throw new Error(`Expected string or number, got '${padding}'.`);
            }

    8.Type Alias:
        - Type aliases allow you to create a new name for an existing type. 
        - They are useful for simplifying complex type definitions.
        EX:
            type StringOrNumber = string | number;
            let value: StringOrNumber;
            value = "Hello";
            value = 123;

    9.Array Type Literal:
        - TypeScript allows you to specify the type of elements in an array using array type literals.
        EX:
            let stringArray: string[] = ["a", "b", "c"];
            let numberArray: Array<number> = [1, 2, 3];

    10.Tuples:
        - Tuples are a special type of array where the type of elements is known, and the number of elements is fixed.
        EX:
            let person: [string, number];
            person = ["John", 30];

# Part-2:

    11.Literal Types:
        - Literal types allow you to specify an exact value that a variable can hold. 
        - They are useful in defining more precise types.
        EX:
            type Direction = "up" | "down" | "left" | "right";
            let move: Direction = "up";

    12.Function Return Type:
        - You can specify the return type of a function to ensure that it returns a value of a specific type.
        Ex:
            function add(a: number, b: number): number {
                return a + b;
            }

    13.Optional Parameters:
        - Function parameters can be made optional by appending a ? to their name. 
        - This means the parameter may or may not be provided.
        EX:
            function greet(name: string, greeting?: string): string {
                if (greeting) {
                    return `${greeting}, ${name}!`;
                } else {
                    return `Hello, ${name}!`;
                }
            }

    14.void:
        - The void type represents the absence of having any type at all. 
        - It's commonly used as the return type of functions that do not return a value.
        EX:
            function logMessage(message: string): void {
                console.log(message);
            }

    15.Callbacks:
        - A callback is a function passed into another function as an argument, which is then invoked inside the outer function 
            to complete some kind of routine or action.
        EX:
            function fetchData(url: string, callback: (data: any) => void) {
                // Simulating fetching data
                const data = { id: 1, name: "John Doe" };
                callback(data);
            }

    16.Modules:
        - TypeScript supports ES6-style modules to organize code into reusable components. 
        - Modules can export and import functionalities.
        EX:
            // math.ts
            export function add(a: number, b: number): number {
                return a + b;
            }

            // main.ts
            import { add } from './math';

            console.log(add(2, 3));

    17.Objects:
        - Objects can be defined with specific types for their properties. 
        - You can use interfaces or type aliases to define the structure of an object.
        EX:
            interface User {
                name: string;
                age: number;
                isActive: boolean;
            }

            const user: User = {
                name: "John Doe",
                age: 30,
                isActive: true,
            };

    18.Interfaces:
        - Interfaces define the structure of an object, specifying the types of its properties. 
        - They can also describe functions and arrays.
        Ex:
            interface Person {
                firstName: string;
                lastName: string;
                age?: number; // Optional property
            }

            function greet(person: Person): string {
                return `Hello, ${person.firstName} ${person.lastName}`;
            }

            const user: Person = { firstName: "John", lastName: "Doe" };
            console.log(greet(user));

    19.Object-Oriented Programming (OOP):
        - TypeScript supports OOP principles such as classes, inheritance, encapsulation, and polymorphism.
        EX:
            class Animal {
                private name: string;

                constructor(name: string) {
                    this.name = name;
                }

                move(distance: number = 0) {
                    console.log(`${this.name} moved ${distance} meters.`);
                }
            }

            class Dog extends Animal {
                bark() {
                    console.log("Woof! Woof!");
                }
            }

            const dog = new Dog("Rex");
            dog.bark();
            dog.move(10);

    20.Structural Type System:
        - TypeScript uses a structural type system, meaning that type compatibility is determined by the structure of the 
            types rather than their explicit declarations. 
        - If two types have the same shape, they are considered compatible.
        EX:
            interface Point {
                x: number;
                y: number;
            }

            function printPoint(point: Point) {
                console.log(`x: ${point.x}, y: ${point.y}`);
            }

            // Compatible because it has the same shape as Point
            const point = { x: 10, y: 20 };
            printPoint(point);

# Part-3:

    21.Substitutability:
        - Substitutability, also known as the Liskov Substitution Principle, is a principle in object-oriented programming 
            that states that objects of a superclass should be replaceable with objects of a subclass without affecting 
            the correctness of the program.
        Ex:
            class Bird {
                fly(): void {
                    console.log("Flying");
                }
            }

            class Sparrow extends Bird {
                chirp(): void {
                    console.log("Chirping");
                }
            }

            function makeBirdFly(bird: Bird): void {
                bird.fly();
            }

            const sparrow = new Sparrow();
            makeBirdFly(sparrow); // Subclass Sparrow is substitutable for superclass Bird

    22.Classes:
        - Classes in TypeScript are templates for creating objects. 
        - They encapsulate data and functionality.
        EX:
            class Person {
                private name: string;
                private age: number;

                constructor(name: string, age: number) {
                    this.name = name;
                    this.age = age;
                }

                greet(): void {
                    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
                }
            }

            const person = new Person("John", 30);
            person.greet();

    23.Inheritance:
        - Inheritance allows a class to inherit properties and methods from another class.
        Ex:
            class Animal {
                move(distance: number): void {
                    console.log(`Animal moved ${distance} meters.`);
                }
            }

            class Dog extends Animal {
                bark(): void {
                    console.log("Woof! Woof!");
                }
            }

            const dog = new Dog();
            dog.bark();
            dog.move(10);

    24.Polymorphism:
        - Polymorphism allows objects of different types to be treated as objects of a common super type. 
        - It is typically achieved through method overriding.
        EX:
            class Animal {
                makeSound(): void {
                    console.log("Some sound");
                }
            }

            class Dog extends Animal {
                makeSound(): void {
                    console.log("Woof! Woof!");
                }
            }

            class Cat extends Animal {
                makeSound(): void {
                    console.log("Meow! Meow!");
                }
            }

            function makeAnimalSound(animal: Animal): void {
                animal.makeSound();
            }

            const dog = new Dog();
            const cat = new Cat();

            makeAnimalSound(dog);
            makeAnimalSound(cat);

    25.unknown:
        - The unknown type is similar to the any type but safer. 
        - It represents any value but requires a type assertion or a type guard before performing operations on it.
        Ex:
            let value: unknown;
            value = "Hello";

            if (typeof value === "string") {
                console.log(value.toUpperCase()); // Type guard ensures `value` is a string
            }

    26.Function Overload:
        - Function overloads allow you to define multiple signatures for a function. 
        - This is useful when a function can be called with different argument types and numbers.
        EX:
            function add(a: number, b: number): number;
            function add(a: string, b: string): string;
            function add(a: any, b: any): any {
                return a + b;
            }

            console.log(add(1, 2)); // 3
            console.log(add("Hello, ", "world!")); // "Hello, world!"

    27.Generics:
        - Generics allow you to write functions and classes that work with different types while keeping type safety.
        EX:
            function identity<T>(arg: T): T {
                return arg;
            }

            console.log(identity<string>("Hello")); // "Hello"
            console.log(identity<number>(42)); // 42

    28.Utility Types:
        - Utility types are built-in types that facilitate common type transformations. 
        - Examples include Partial, Readonly, Record, Pick, and Omit.
        EX:
            interface Person {
                name: string;
                age: number;
                address: string;
            }

            type PartialPerson = Partial<Person>;
            const person: PartialPerson = { name: "John" };

            type ReadonlyPerson = Readonly<Person>;
            const readonlyPerson: ReadonlyPerson = { name: "John", age: 30, address: "123 Main St" };

    29.Records:
        - The Record utility type constructs an object type with a set of properties K of type T.
        Ex:
            type Person = { name: string; age: number; };
            type People = Record<string, Person>;

            const people: People = {
                john: { name: "John Doe", age: 30 },
                jane: { name: "Jane Doe", age: 25 }
            };

    30.Discriminated Unions:
        - Discriminated unions (also known as tagged unions or algebraic data types) are a powerful pattern for creating and 
            working with types that have a finite set of values.
        EX:
            interface Square {
                kind: "square";
                size: number;
            }

            interface Rectangle {
                kind: "rectangle";
                width: number;
                height: number;
            }

            interface Circle {
                kind: "circle";
                radius: number;
            }

            type Shape = Square | Rectangle | Circle;

            function area(shape: Shape): number {
                switch (shape.kind) {
                    case "square":
                        return shape.size * shape.size;
                    case "rectangle":
                        return shape.width * shape.height;
                    case "circle":
                        return Math.PI * shape.radius * shape.radius;
                }
            }

            const mySquare: Square = { kind: "square", size: 2 };
            console.log(area(mySquare)); // 4

# Part-4:

    31.Immutability:
        - Immutability refers to the practice of creating data structures that cannot be modified after they are created. 
        - In TypeScript, you can achieve immutability using readonly properties or utility types like Readonly.
        EX:
            interface User {
                readonly id: number;
                name: string;
            }

            const user: User = { id: 1, name: "John" };
            user.name = "Doe"; // Allowed
            // user.id = 2; // Error: Cannot assign to 'id' because it is a read-only property

    32.Promises + Fetch:
        - Promises represent asynchronous operations in JavaScript. 
        - The Fetch API is used to make network requests and returns a Promise.
        EX:
            async function fetchData(url: string): Promise<void> {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    console.log(data);
                } catch (error) {
                    console.error("Error fetching data:", error);
                }
            }

            fetchData("https://api.example.com/data");

    33.Intersection Types:
        - Intersection types combine multiple types into one. 
        - This allows you to merge the properties of several types into a single type.
        Ex:
            interface Person {
                name: string;
                age: number;
            }

            interface Employee {
                employeeId: number;
            }

            type PersonEmployee = Person & Employee;

            const personEmployee: PersonEmployee = { name: "John", age: 30, employeeId: 1 };
    
    34.DOM Interfaces:
        - TypeScript provides type definitions for the DOM, which helps you interact with HTML elements in a type-safe manner.
        Ex:
            const button: HTMLButtonElement | null = document.querySelector("button");
            if (button) {
                button.addEventListener("click", () => {
                    console.log("Button clicked");
                });
            }

    35.DOM Selection:
        - DOM selection involves selecting elements from the DOM using methods like getElementById, querySelector, 
            and querySelectorAll.
        EX:
            const header: HTMLElement | null = document.getElementById("header");
            const items: NodeListOf<HTMLLIElement> = document.querySelectorAll("li");

            if (header) {
                header.style.color = "blue";
            }

            items.forEach(item => {
                item.style.backgroundColor = "yellow";
            });

    36.DOM Operations:
        - DOM operations include manipulating elements, adding or removing elements, and modifying element properties or content.
        EX:
            const div: HTMLDivElement = document.createElement("div");
            div.textContent = "Hello, World!";
            document.body.appendChild(div);

            const oldElement: HTMLElement | null = document.getElementById("old");
            if (oldElement) {
                oldElement.remove();
            }

    37.DOM Events:
        - DOM events are actions or occurrences that happen in the web browser, which you can respond to using event listeners.
        Ex:
            const button: HTMLButtonElement | null = document.querySelector("button");

            function handleClick(event: MouseEvent): void {
                console.log("Button clicked", event);
            }

            if (button) {
                button.addEventListener("click", handleClick);
            }

    38.Enums:
        - Enums allow you to define a set of named constants. 
        - TypeScript supports numeric and string enums.
        EX:
            enum Direction {
                Up = 1,
                Down,
                Left,
                Right
            }

            console.log(Direction.Up); // 1
            console.log(Direction[2]); // Down

            enum Status {
                Success = "SUCCESS",
                Failure = "FAILURE"
            }

            console.log(Status.Success); // "SUCCESS"

    39.Ambient Modules:
        - Ambient modules are used to describe the shape of a module that is not written in TypeScript. 
        - They allow you to import non-TypeScript libraries into your TypeScript codebase.
        EX:
            // In a .d.ts file
            declare module "myLibrary" {
                export function myFunction(): void;
            }

            // In a TypeScript file
            import { myFunction } from "myLibrary";
            myFunction();

    40.Migrating to TypeScript:
        - Migrating a JavaScript project to TypeScript involves incrementally adding TypeScript support, renaming files, 
            and adding type annotations.
        * Steps:
            1. Initialize TypeScript:
                - tsc --init
            2. Rename .js files to .ts:
                - Start by renaming a few JavaScript files to TypeScript files.
            3. Fix Type Errors:
                - Fix any type errors that TypeScript reports.
            4. Add Type Definitions:
                - Add type definitions for any third-party libraries you use.
            5. Enable Strict Mode:
                - Enable strict mode in tsconfig.json to catch more errors.
                EX:
                    {
                        "compilerOptions": {
                            "strict": true
                        }
                    }
            6. Iterate:
                - Repeat the process for the rest of your codebase.
                EX:
                    // Example: Converting JavaScript to TypeScript
                    // Before (JavaScript)
                    function greet(name) {
                        return "Hello, " + name;
                    }

                    // After (TypeScript)
                    function greet(name: string): string {
                        return `Hello, ${name}`;
                    }





